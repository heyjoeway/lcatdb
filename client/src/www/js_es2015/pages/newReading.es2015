LcatDB.pages.newReading = {};

LcatDB.pages.newReading.updateConfigList = function(init) {
    LcatDB.offlineInfo.get(function(gotNewInfo) {
        let html = '';

        let configurationIndex = $('#configuration-picker').val() || 0;

        LcatDB.offlineInfo.info().configurations.forEach(function(configuration, i) {
            html += `<option value="${i}">${configuration.name}</option>`;

            if (init && configuration['_id'] == LcatDB.pages.newReading.session.configurationId)
                configurationIndex = i;
        });

        $('#configuration-picker')
            .html(html)
            .selectpicker('refresh')
            .val(configurationIndex);

        LcatDB.pages.newReading.changeConfig();
    }, true);
};

LcatDB.pages.newReading.changeConfig = function() {
    $.get('./templates/configurationSensors.mustache', function(template, status) {
        if (status != 'success') return;

        let configurationIndex = $("#configuration-picker").val();

        let data = LcatDB.offlineInfo.info();
        let configuration = data.configurations[configurationIndex]; 
        LcatDB.pages.newReading.session.configurationId = configuration['_id'];

        configuration.sensors.forEach(function(sensor, i) {
            sensor.index = i;
            sensor.html = Mustache.render(
                data.sensorTypes[sensor.type].inputTemplate,
                sensor
            );
        });

        $('#configuration-sensors').html(
            Mustache.render(template, {
                "configuration": configuration
            })
        );
        $('#configuration-link').prop(
            'href',
            `${LcatDB.serverUrl}/configurations/${configuration['_id']}`
        );
        $('.configuration-chosen').show();
        $('.configuration-notchosen').hide();

        $('#configuration-sensors .spoiler').spoiler();
        LcatDB.changeUnitSystem();
        LcatDB.pages.newReading.initSensorBtns();
        LcatDB.pages.newReading.updateSubmit();
    });
}

// ----------------------------------------------------------------------------

LcatDB.pages.newReading.updateMap = function() {
    let lat = $('input[name="location[lat]"]').val();
    let long = $('input[name="location[long]"]').val();

    if ((lat == 0) && (long == 0)) {
        lat = 44.57670853058025;
        long = -73.32539651979982;
    }
    
    let pos = [lat, long];

    LcatDB.pages.newReading.session.marker.setLatLng(pos);
    LcatDB.pages.newReading.session.map.panTo(pos);
};

LcatDB.pages.newReading.modalFinish = function($element) {
    LcatDB.pages.newReading.updateConfigList();
    $element.modal('hide');
};

LcatDB.pages.newReading.initSensorBtns = function() {
    $('#sensor-new').off('click').click(function(e) {
        e.preventDefault();

        let cid = LcatDB.pages.newReading.session.configurationId;

        LcatDB.modal(
            'Add New Sensor',
            `${LcatDB.serverUrl}/sensors/new?configuration=${cid}&modal=true`,
            LcatDB.pages.newReading.modalFinish
        );
    });

    $('#sensor-existing').off('click').click(function(e) {
        e.preventDefault();

        let cid = LcatDB.pages.newReading.session.configurationId;

        LcatDB.modal(
            'Add Existing Sensor',
            `${LcatDB.serverUrl}/configurations/${cid}/addSensor?modal=true`,
            LcatDB.pages.newReading.modalFinish
        );
    });

    $('.sensor-remove').off('click').click(function(e) {
        e.preventDefault();

        let sid = $(this).data('sid');
        let cid = LcatDB.pages.newReading.session.configurationId;


        LcatDB.modal(
            'Remove Sensor',
            `${LcatDB.serverUrl}/configurations/${cid}/removeSensor?modal=true&sid=${sid}`,
            LcatDB.pages.newReading.modalFinish
        );
    });
};

// ----------------------------------------------------------------------------

LcatDB.pages.newReading.getLocation = function(auto) {
    if (auto && (localStorage['LcatDB.location.auto'] != 'true'))
        return;

    if (!mobileDetect.phone()) return;

    if (!navigator.geolocation)
        return $.notify({
            "message": 'Could not retrieve location. Geolocation is not supported by this browser.'
        }, {
            "type": 'warning'
        });

    navigator.geolocation.getCurrentPosition(
        (pos) => { // Success
            $('input[name="location[lat]"]')
                .val(pos.coords.latitude)
                .change();
            $('input[name="location[long]"]')
                .val(pos.coords.longitude)
                .change();
            $('input[name="location[range]"]')
                .val(pos.coords.accuracy)
                .change();
            $('input[name="location[alt]"]')
                .val(pos.coords.altitude)
                .change();
            $('input[name="location[altRange]"]')
                .val(pos.coords.altitudeAccuracy)
                .change();
            updateMap();
        },
        () => { // Failure
            $.notify({
                "message": 'Could not retrieve location. Please allow location on your device.'
            }, {
                "type": 'warning'
            });
        },
        { // Options
            "enableHighAccuracy": true,
            "maximumAge": 3 * 60 * 1000, // 3 minutes
            "timeout": 15 * 1000 // 15 sec (may increase)
        }
    );
};


// https://stackoverflow.com/a/1186309
LcatDB.pages.newReading.objectifyForm = function(formArray) {
    var returnArray = {};
    for (var i = 0; i < formArray.length; i++)
       returnArray[formArray[i]['name']] = formArray[i]['value'];

    return returnArray;
};

LcatDB.pages.newReading.queueReading = function() {
    if (typeof cordova == 'undefined') return;

    let formData = LcatDB.pages.newReading.objectifyForm(
        $('form').serializeArray()
    );
};

LcatDB.pages.newReading.updateSubmit = function() {
    $(document).on('submit', 'form', function(e) {
        e.preventDefault();
        LcatDB.pages.newReading.submit();
    });
};

LcatDB.pages.newReading.submit = function() {
    if (LcatDB.inApp()) LcatDB.pages.newReading.submitCordova();
    else LcatDB.pages.newReading.submitWeb();
};

LcatDB.pages.newReading.submitWeb = function(failCallback) {
    function finish(success, data) {
        if (success)
            return location.href = `${LcatDB.serverUrl}/readings/${data.rid}`;

        if (failCallback) return failCallback(data);
        $.notify({
            "message": "Could not submit reading. Make sure you're online and that all of the fields are properly filled out."
        }, {
            "type": 'danger'
        });
        LcatDB.finishInputBlock();
    }

    LcatDB.startInputBlock();

    let formData = $('#form').serializeArray();
    // Add extra attribute to request that sends back data in JSON
    formData.push({
        "name": "infoOnly",
        "value": true
    });

    let cid = LcatDB.pages.newReading.session.configurationId;

    $.post(
        `${LcatDB.serverUrl}/configurations/${cid}/readingDo`,
        formData,
        (data, status) => { finish(status == "success", data); }
    ).fail(() => {
        finish(false);
    });
};

LcatDB.pages.newReading.validateInput = function() {
    let $form = $('#form');
    let hasFailed = $("#form").find("input").toArray().some(input => {
        let $input = $(input);

        let isRequired = input.required;
        let isEmpty = $input.val() == "";
        let isValid = input.checkValidity();
        
        return !isValid || (isRequired && isEmpty);
    });  

    if (hasFailed)
        $.notify({
            "message": "Please make sure all fields are properly filled out."
        }, {
            "type": "danger"
        });

    return !hasFailed;
};

LcatDB.pages.newReading.submitCordova = function() {
    // iOS webkit doesn't support field validation because apple is fantastic
    // so we have to do it manually
    if (LcatDB.isiOS && !LcatDB.pages.newReading.validateInput()) return;

    // Try to submit normally over the internet, and if that doesn't work
    // then just cache it and go to the queue
    let cid = LcatDB.pages.newReading.session.configurationId;

    LcatDB.pages.newReading.submitWeb(function(data) {
        LcatDB.offlineEventQueue.addEvent(new OfflineEventPost({
            "data": {
                "formUrl": `${LcatDB.serverUrl}/configurations/${cid}/readingDo`,
                "formData": $('#form').serializeArray()
            },
            "name": "Reading"
        }));
        location.href = './queue.html';
    });
};

LcatDB.pages.newReading.initMap = function() {
    let session = LcatDB.pages.newReading.session;

    let pos = [
        44.57670853058025,
        -73.32539651979982
    ];

    let map = L.map('map');
    session.map = map;
    map.on('load', () => {
        setInterval(() => {
            map.invalidateSize();
        }, 1000);
    });
    map.setView(pos, 11);

    let mapConfig = LcatDB.getMapConfig();
    let layer = L.tileLayer(mapConfig.url, mapConfig.options);
    layer.addTo(map);

    let marker = L.marker(pos, {
        draggable: true,
        autoPan: true,
        icon: L.icon({
            iconUrl: './img/map/markerRed.png',
            shadowUrl: './img/map/markerRed.png',
            iconAnchor: [12, 41],
            shadowUrl: './img/map/markerShadow.png',
            popupAnchor: [0, -41]
        })
    }).addTo(map);

    session.marker = marker;
    
    marker.on('dragend', () => {
        var pos = marker.getLatLng();
        $('input[name="location[lat]"]').val(pos.lat).change();
        $('input[name="location[long]"]').val(pos.lng).change();
        LcatDB.pages.newReading.updateMap();
    });

    $('input[name="location[lat]"]').change(
        LcatDB.pages.newReading.updateMap
    );
    $('input[name="location[long]"]').change(
        LcatDB.pages.newReading.updateMap
    );

    LcatDB.pages.newReading.getLocation(true);
};

LcatDB.pages.newReading.preventEnterKey = function() {
    // https://stackoverflow.com/a/895231
    $(window).keydown(function(event){
        if (event.keyCode == 13) {
            event.preventDefault();
            return false;
        }
    });
};

LcatDB.pages.newReading.initDatetime = function() {
    if(!Modernizr.inputtypes['datetime-local'])
        $('input[type=datetime-local]').datetimepicker({
            "showMeridian": true,
            "format": "yyyy-mm-ddThh:ii",
            "startView": 2,
            "minView": 0,
            "todayBtn": true,
            "todayHighlight": true
        });
};

LcatDB.pages.newReading.initMobile = function() {
    let session = LcatDB.pages.newReading.session;

    session.mobileDetect = new MobileDetect(window.navigator.userAgent);
    
    if (session.mobileDetect.phone())
        $('#location_mobile').show();
    else
        $('#location_desktop').show();
};

LcatDB.pages.newReading.initConfigList = function() {
    LcatDB.pages.newReading.updateConfigList(true);

    $("#configuration-picker").change(
        LcatDB.pages.newReading.changeConfig
    );
};

LcatDB.pages.newReading.init = function() {
    let session = LcatDB.pages.newReading.session = {};

    let queryObj = LcatDB.urlQueryObj(location.href);
    session.configurationId = queryObj.configuration;    

    LcatDB.pages.newReading.initConfigList();
    LcatDB.pages.newReading.initMobile();
    LcatDB.pages.newReading.initDatetime();
    LcatDB.pages.newReading.preventEnterKey();
    LcatDB.updateNavbar();

    $('.normalize').unitnorm();
    $('.spoiler').spoiler();

    $("input[name=timeCreated]")
        .val((new Date).getTime())
        .change();

    $("#location_auto").prop('checked', localStorage['LcatDB.location.auto'] == 'true');
    $("#location_auto").change(function() {
        localStorage['LcatDB.location.auto'] = $(this).prop('checked').toString();
    });

    LcatDB.pages.newReading.initMap();
};

$('document').ready(function() { LcatDB.pages.newReading.init() });