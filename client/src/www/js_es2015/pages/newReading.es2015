let configurationId, map, marker, mobileDetect;

function initConfigList() {
    updateConfigList(true);

    $("#configuration-picker").change(changeConfig);
}

function updateConfigList(init) {
    offlineInfo.get(true, function(gotNewInfo) {
        let html = '';

        let configurationIndex = $('#configuration-picker').val() || 0;

        offlineInfo.info().configurations.forEach(function(configuration, i) {
            html += `<option value="${i}">${configuration.name}</option>`;

            if (init && configuration['_id'] == configurationId)
                configurationIndex = i;
        });

        $('#configuration-picker')
            .html(html)
            .selectpicker('refresh')
            .val(configurationIndex);

        changeConfig();
    });
}

function changeConfig() {
    $.get('./templates/configurationSensors.mustache', function(template, status) {
        if (status != 'success') return;

        let configurationIndex = $("#configuration-picker").val();

        let data = offlineInfo.info();
        let configuration = data.configurations[configurationIndex]; 
        configurationId = configuration['_id'];

        configuration.sensors.forEach(function(sensor, i) {
            sensor.index = i;
            sensor.html = Mustache.render(
                data.sensorTypes[sensor.type].inputTemplate,
                sensor
            );
        });

        $('#configuration-sensors').html(
            Mustache.render(template, {
                "configuration": configuration
            })
        );
        $('#configuration-link').prop(
            'href',
            '/configurations/' + configuration['_id']
        );
        $('.configuration-chosen').show();
        $('.configuration-notchosen').hide();

        $('#configuration-sensors .spoiler').spoiler();
        changeUnitSystem();
        initSensorBtns();
        updateSubmit();
    });
}

// ----------------------------------------------------------------------------

function updateMap() {
    if (typeof cordova == 'undefined') updateMapWeb();
    else updateMapCordova();
}

function updateMapWeb() {
    let lat = $('input[name="location[lat]"]').val();
    let long = $('input[name="location[long]"]').val();

    if ((lat == 0) && (long == 0)) {
        lat = 44.57670853058025;
        long = -73.32539651979982;
    }
    
    let pos = new google.maps.LatLng(lat, long);

    marker.setPosition(pos);
    map.setCenter(pos);
}

function updateMapCordova() {
    let lat = $('input[name="location[lat]"]').val();
    let long = $('input[name="location[long]"]').val();

    if ((lat == 0) && (long == 0)) {
        lat = 44.57670853058025;
        long = -73.32539651979982;
    }
    
    let pos = {
        lat: parseFloat(lat),
        lng: parseFloat(long)
    };

    try {
        marker.setPosition(pos);
    } catch(e) { }
    map.animateCamera({
        target: pos,
        duration: 1000
    });
}

// ----------------------------------------------------------------------------

function initMap() {
    if (typeof cordova == 'undefined')
        setTimeout(initMapWeb, 1000);
    else initMapCordova(); 
}

function initMapWeb() {
    let pos = {
        "lat": 44.57670853058025,
        "lng": -73.32539651979982
    };

    map = new google.maps.Map(document.getElementById('map'), {
        "zoom": 11,
        "center": pos,
        "streetViewControl": false,
        "mapTypeId": "terrain",
        "scrollwheel": false
    });
    
    marker = new google.maps.Marker({
        "map": map,
        "draggable": true,
        "animation": google.maps.Animation.DROP,
        "position": pos
    });

    google.maps.event.addListener(marker, 'dragend', () => {
        var pos = marker.getPosition();
        $('input[name="location[lat]"]').val(pos.lat()).change();
        $('input[name="location[long]"]').val(pos.lng()).change();
        updateMap();
    });

    $('input[name="location[lat]"]').change(updateMap);
    $('input[name="location[long]"]').change(updateMap);

    getLocation(true);
}

function initMapCordova() {
    map = plugin.google.maps.Map.getMap(document.getElementById('map'), {
        "mapType": plugin.google.maps.MapTypeId.TERRAIN,
        "controls": {
            "compass": true,
            "myLocationButton": true,
            "indoorPicker": false,
            "zoom": true
        },
        "camera": {
            "target": {
                "lat": 44.57670853058025,
                "lng": -73.32539651979982
            },
            zoom: 11
        },
        "preferences": {
            "zoom": {
                "minZoom": 10,
                "maxZoom": 18
            },
            "building": true
        }
    });

    map.one(plugin.google.maps.event.MAP_READY, function() {
        marker = map.addMarker({
            "position": {
                "lat": 44.57670853058025,
                "lng": -73.32539651979982
            },
            "draggable": true,
            'title': "Your Location",
            'snippet': "Press a few seconds on this marker to drag.",
        }, function(marker) {
            window.marker = marker;
    
            marker.on(plugin.google.maps.event.MARKER_DRAG_END, function() {
                let pos = marker.getPosition();
                $('input[name="location[lat]"]').val(pos.lat).change();
                $('input[name="location[long]"]').val(pos.lng).change();
                updateMapCordova();
            });
        
            $('input[name="location[lat]"]').change(updateMapCordova);
            $('input[name="location[long]"]').change(updateMapCordova);
        
            getLocation(true);
        });
    });


}

// ----------------------------------------------------------------------------

function modalFinish($element) {
    updateConfigList();
    $element.modal('hide');
}

function initSensorBtns() {
    $('#sensor-new').off('click').click(function(e) {
        e.preventDefault();

        modal(
            'Add New Sensor',
            `${serverUrl}/sensors/new?configuration=${configurationId}&modal=true`,
            modalFinish
        );
    });

    $('#sensor-existing').off('click').click(function(e) {
        e.preventDefault();

        modal(
            'Add Existing Sensor',
            `${serverUrl}/configurations/${configurationId}/addSensor?modal=true`,
            modalFinish
        );
    });

    $('.sensor-remove').off('click').click(function(e) {
        e.preventDefault();

        let sid = $(this).data('sid');

        modal(
            'Remove Sensor',
            `${serverUrl}/configurations/${configurationId}/removeSensor?modal=true&sid=${sid}`,
            modalFinish
        );
    });
}

// ----------------------------------------------------------------------------

function getLocation(auto) {
    if (auto && !(localStorage['location.auto'] == 'true')) return updateMap();

    if (typeof cordova == 'undefined') getLocationWeb();
    else getLocationCordova();
}

function getLocationWeb() {
    if (!mobileDetect.phone()) return;
    if (!navigator.geolocation) {
        $.notify({
            "message": 'Could not retrieve location. Geolocation is not supported by this browser.'
        }, {
            "type": 'warning'
        });
        return;
    }

    navigator.geolocation.getCurrentPosition(
        (pos) => { // Success
            $('input[name="location[lat]"]')
                .val(pos.coords.latitude)
                .change();
            $('input[name="location[long]"]')
                .val(pos.coords.longitude)
                .change();
            $('input[name="location[range]"]')
                .val(pos.coords.accuracy)
                .change();
            $('input[name="location[alt]"]')
                .val(pos.coords.altitude)
                .change();
            $('input[name="location[altRange]"]')
                .val(pos.coords.altitudeAccuracy)
                .change();
            updateMapWeb();
        },
        getLocationFail,
        { // Options
            "enableHighAccuracy": true,
            "maximumAge": 3 * 60 * 1000, // 3 minutes
            "timeout": 15 * 1000 // 15 sec (may increase)
        }
    );
}

function getLocationCordova() {
    map.getMyLocation(function(location) {
        console.log(location);

        $('input[name="location[lat]"]')
            .val(location.latLng.lat)
            .change();
        $('input[name="location[long]"]')
            .val(location.latLng.lng)
            .change();
        $('input[name="location[range]"]')
            .val('')
            .change();
        $('input[name="location[alt]"]')
            .val('')
            .change();
        $('input[name="location[altRange]"]')
            .val('')
            .change();
        updateMapCordova(); 
    }, getLocationFail);
}

function getLocationFail() {
    $.notify({
        "message": 'Could not retrieve location. Please allow location on your device.'
    }, {
        "type": 'warning'
    });
}

// ----------------------------------------------------------------------------

function initMobile() {
    mobileDetect = new MobileDetect(window.navigator.userAgent);
    
    if (mobileDetect.phone())
        $('#location_mobile').show();
    else
        $('#location_desktop').show();
}

// ----------------------------------------------------------------------------

function preventEnterKey() {
    // https://stackoverflow.com/a/895231
    $(window).keydown(function(event){
        if(event.keyCode == 13) {
            event.preventDefault();
            return false;
        }
    });
}

// ----------------------------------------------------------------------------

function initDatetime() {
    if(!Modernizr.inputtypes['datetime-local']) {
        $('input[type=datetime-local]').datetimepicker({
            "showMeridian": true,
            "format": "yyyy-mm-ddThh:ii",
            "startView": 2,
            "minView": 0,
            "todayBtn": true,
            "todayHighlight": true
        });
    }
}

// ----------------------------------------------------------------------------

// https://stackoverflow.com/a/1186309
function objectifyForm(formArray) {//serialize data function
    var returnArray = {};
    for (var i = 0; i < formArray.length; i++)
       returnArray[formArray[i]['name']] = formArray[i]['value'];

    return returnArray;
}

function queueReading() {
    if (typeof cordova == 'undefined') return;

    let formData = objectifyForm($('form').serializeArray());
}

// ----------------------------------------------------------------------------

function updateSubmit() {
    $(document).on('submit', 'form', function(e) {
        e.preventDefault();
        submit();
     });
    // $('#publish').off('click').click(function(e) {
    // });
}

function submit() {
    if (typeof cordova == 'undefined') submitWeb();
    else submitCordova();
}

function submitWeb(failCallback) {
    function finish(success, data) {
        
        if (success)
            location.href = `${serverUrl}/readings/${data.rid}`;
        else {
            if (failCallback) return failCallback(data);
            $.notify({
                "message": "Could not submit reading. Make sure you're online and that all of the fields are properly filled out."
            }, {
                "type": 'danger'
            });
            finishInputBlock();
        }
    }

    startInputBlock();

    let formData = $('#form').serializeArray();
    formData.push({
        "name": "infoOnly",
        "value": true
    });

    $.post(
        `${serverUrl}/configurations/${configurationId}/readingDo`,
        formData,
        (data, status) => {
            finish(status == "success", data);
        }
    ).fail(() => {
        finish(false);
    });
}

function submitCordova() {
    submitWeb(function(data) {
        offlineEventQueue.addEvent(new OfflineEventPost({
            "data": {
                "formUrl": `${serverUrl}/configurations/${configurationId}/readingDo`,
                "formData": $('#form').serializeArray()
            },
            "name": "Reading"
        }));
        location.href = './queue.html';
    })
}
// ----------------------------------------------------------------------------

function init() {
    let queryObj = urlQueryObj(location.href);
    configurationId = queryObj.configuration;    

    initConfigList();
    initMobile();
    initDatetime();
    preventEnterKey();
    updateNavbar();

    $('.normalize').unitnorm();
    $('.spoiler').spoiler();

    $("input[name=timeCreated]")
        .val((new Date).getTime())
        .change();

    if (typeof window.parent.cordova != 'undefined') {
        window.pluginWait = setInterval(function() {
            if (window.parent.plugin) {
                window.google = window.parent.plugin.google;
                initMap();
                clearInterval(window.pluginWait);
            }
        }, 1000);
    } else $.getScript(`<!--map_url-->`); // this gets replaced by grunt

    $("#location_auto").prop('checked', localStorage['location.auto'] == 'true');
    $("#location_auto").change(function() {
        localStorage['location.auto'] = $(this).prop('checked').toString();
    });
}

$(window).ready(init);


// function prefValue(key, val) {
//     if (val) localStorage[`configurations.${configurationId}.${key}`] = val;
//     return localStorage[`configurations.${configurationId}.${key}`];
// }

// let prefHandlers = [
//     {
//         "name": 'location_auto',
//         "load": function() {
//             let queryObj = urlQueryObj(location.href);

//             if ('quick' in queryObj) prefValue(this.name, true)

//             let isSet = prefValue(this.name) == 'true';

//             $('#' + this.name).prop('checked', isSet);
//             if (isSet) getLocation();
//         },
//         "save": function() {
//             prefValue(this.name, $('#' + this.name).prop('checked').toString());
//         },
//         "listen": function() {
//             $('#' + this.name).change(() => { this.save() });
//         }
//     }
// ];

// function loadPrefs() {
//     prefHandlers.forEach((handler) => {
//         handler.load();
//     });
// }

// function savePrefs() {
//     prefHandlers.forEach((handler) => {
//         handler.save();
//     });
// }

// function listenPrefs() {
//     prefHandlers.forEach((handler) => {
//         handler.listen();
//     });
// }
