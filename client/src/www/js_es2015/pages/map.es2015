let queries, map, markers, data, mapLoaded = false, dataLoaded = false;

let markerImages = [
    '/img/map/markerRed.png',
    '/img/map/markerYellow.png',
    '/img/map/markerBlue.png',
    '/img/map/markerGreen.png',
    '/img/map/markerPurple.png',
    '/img/map/markerOrange.png',
    '/img/map/markerCyan.png',
    '/img/map/markerBrown.png',
    '/img/map/markerWhite.png',
    '/img/map/markerGrey.png',
    '/img/map/markerBlack.png'
];

function initBuoy() {
    let marker = new google.maps.Marker({
        "map": map,
        "icon": '/img/map/markerBlack.png'
    });

    let markerInfoContent = `
<a href="https://leibensperger.github.io/buoy.html">
    For information on the SUNY Plattsburgh Lake Champlain Data Buoy, click here.
</a>`;

    let markerInfo = new google.maps.InfoWindow({
        "content": markerInfoContent,
        "maxWidth": 1000
    });

    marker.addListener('click', function() {
        markerInfo.open(map, marker);
    });

    let location = new google.maps.LatLng(
        44.60317,
        -73.39378
    );

    marker.setPosition(location);
}

function initMap() {
    map = new google.maps.Map(document.getElementById('map'), {
        "zoom": 11,
        "center": {
            "lat": 44.57670853058025,
            "lng": -73.32539651979982
        },
        "streetViewControl": false,
        "mapTypeId": "terrain",
        "scrollwheel": false
    });

    mapLoaded = true;

    let queryObj = urlQueryObj(window.location.toString());

    if (queryObj.buoy) initBuoy();

    updateMap();
}

function initData() {
    dataLoaded = false;
    data = [];
    let queriesLeft = queries.length;

    queries.forEach((query, arr, i) => {

        $.post('/api/readings', query, function(dataSet, textStatus) {        
            if (textStatus == 'success') {
                data.push(dataSet);
                queriesLeft--;
                if (queriesLeft == 0) {
                    dataLoaded = true;
                    updateMap();
                }
            }
        });
    });
}

function updateMap() {
    if (!dataLoaded || !mapLoaded) return;

    markers = markers || [];
    markers.forEach((marker) => {
        marker.setMap(null);
    });
    markers = [];

    // ----

    if (!data || !mapLoaded) return;

    let bounds = new google.maps.LatLngBounds();

    let markerImageIndex = 0;

    let dataEmpty = true;

    data.forEach((dataSet) => {
        dataSet.forEach((reading) => {
            let marker = new google.maps.Marker({
                "map": map,
                "icon": markerImages[markerImageIndex]
            });

            let markerInfoContent = `
<iframe class="map-marker-iframe"
    src="/readings/${reading['_id']}?marker=true">
</iframe>`;

            let markerInfo = new google.maps.InfoWindow({
                "content": markerInfoContent,
                "maxWidth": 1000
            });

            marker.addListener('click', function() {
                markerInfo.open(map, marker);
            });

            let location = new google.maps.LatLng(
                reading.location.lat,
                reading.location.long
            );

            marker.setPosition(location);
            bounds.extend(location);

            markers.push(marker);

            dataEmpty = false;
        });
        markerImageIndex = (markerImageIndex + 1) % markerImages.length;
    });

    if (dataEmpty) return;

    map.fitBounds(bounds);
    let zoomInterval = setTimeout(() => {
        if (map.getZoom() > 12) map.setZoom(12);
        else clearInterval(zoomInterval);
    }, 100);
}

function init() {
    let queryObj = urlQueryObj(window.location.toString());

    if (queryObj.queries) {
        queries = JSURL.parse(queryObj.queries);
    } else {
        let query = {
            "fields": {
                "location.lat": 1,
                "location.long": 1
            },
            "filter": {
                "timeCreated": {}
            },
            "sort": [
                ["_id", -1]
            ]
        };

        let readingsMax = parseInt(queryObj.readingsMax);
        if (readingsMax) {
            query.filter.pageSize = readingsMax;
            query.filter.page = 1;
        }

        let timeMin = parseInt(queryObj.timeMin);
        let timeAgo = parseInt(queryObj.timeAgo);
        if (typeof timeAgo != 'undefined') {
            let date = new Date();
            date.setSeconds(date.getSeconds() - timeAgo);
            timeMin = date.getTime();
        }

        if (timeMin || timeMin == 0)
            query.filter.timeCreated['$gte'] = timeMin;

        let timeMax = parseInt(queryObj.timeMax);
        if (timeMax) query.filter.timeCreated['$lte'] = timeMax;

        let id = queryObj.id;
        if (id) query.filter['_id'] = id;

        let configuration = queryObj.configuration;
        if (configuration) query.filter.configuration = configuration;

        let creator = queryObj.creator;
        if (creator) query.filter.creator = creator;

        queries = [query];
    }
    initData();
}

window.onload = init;