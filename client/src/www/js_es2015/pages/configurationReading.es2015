let configurationId, map, marker, mobileDetect;

function getLocation() {
    if (!mobileDetect.phone()) return;
    if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(
            (pos) => { // Success
                $('input[name="location.lat"]').val(
                    pos.coords.latitude).change();
                $('input[name="location.long"]').val(
                    pos.coords.longitude).change();
                $('input[name="location.range"]').val(
                    pos.coords.accuracy).change();
                $('input[name="location.alt"]').val(
                    pos.coords.altitude).change();
                $('input[name="location.altRange"]').val(
                    pos.coords.altitudeAccuracy).change();
                updateMap();
            },
            (error) => { // Failure
                $.notify({
                    "message": 'Could not retrieve location. Please allow location on your device.'
                }, {
                    "type": 'warning'
                });
            },
            { // Options
                "enableHighAccuracy": true,
                "maximumAge": 3 * 60 * 1000, // 3 minutes
                "timeout": 15 * 1000 // 15 sec (may increase)
            }
        );
    } else {
        $.notify({
            "message": 'Could not retrieve location. Geolocation is not supported by this browser.'
        }, {
            "type": 'warning'
        });
    }
}

// ----------------------------------------------------------------------------

function prefValue(key, val) {
    if (val) localStorage[`configurations.${configurationId}.${key}`] = val;
    return localStorage[`configurations.${configurationId}.${key}`];
}

let prefHandlers = [
    {
        "name": 'locationalways',
        "load": function() {
            let queryObj = urlQueryObj(location.href);

            if ('quick' in queryObj) prefValue(this.name, true)

            let isSet = prefValue(this.name) == 'true';

            $('#' + this.name).prop('checked', isSet);
            if (isSet) getLocation();
        },
        "save": function() {
            prefValue(this.name, $('#' + this.name).prop('checked').toString());
        },
        "listen": function() {
            $('#' + this.name).change(() => { this.save() });
        }
    }
];

function loadPrefs() {
    prefHandlers.forEach((handler) => {
        handler.load();
    });
}

function savePrefs() {
    prefHandlers.forEach((handler) => {
        handler.save();
    });
}

function listenPrefs() {
    prefHandlers.forEach((handler) => {
        handler.listen();
    });
}

// ----------------------------------------------------------------------------

function modalFinish($element) {
    updateSensors(() => {
        $element.modal('hide');
    });
}

function initSensorBtns() {
    $('#sensor-new').click(function(e) {
        e.preventDefault();

        modal(
            'Add New Sensor',
            `/sensors/new?configuration=${configurationId}&modal=true`,
            modalFinish
        );
    });

    $('#sensor-existing').click(function(e) {
        e.preventDefault();

        modal(
            'Add Existing Sensor',
            `/configurations/${configurationId}/addSensor?modal=true`,
            modalFinish
        );
    });
}

// ----------------------------------------------------------------------------

function updateSensors(success) {
    $.get('./reading', (data, status) => {
        let sensorsNew = $(data).find(".sensor").toArray();
        let sensorsCurrent = $('body').find('.sensor').toArray();

        let sensorsCurrentIds = sensorsCurrent.map((x) => { return x.id; });

        sensorsNew.forEach((sensor) => {
            if (!sensorsCurrentIds.includes(sensor.id)) {
                $("#sensors").append(sensor);
                $("#sensors-none").hide();
            }
        });

        $('.normalize').unitnorm();
        $(".spoiler").spoiler();

        success();
    });
}


function updateMap() {
    let lat = $('input[name="location.lat"]').val();
    let long = $('input[name="location.long"]').val();

    if ((lat == 0) && (long == 0)) {
        lat = 44.57670853058025;
        long = -73.32539651979982;
    }
    
    let pos = new google.maps.LatLng(lat, long);

    marker.setPosition(pos);
    map.setCenter(pos);
}

function initMap() {
    map = new google.maps.Map(document.getElementById('map'), {
        "zoom": 11,
        "center": {
            "lat": 44.57670853058025,
            "lng": -73.32539651979982
        },
        "streetViewControl": false,
        "mapTypeId": "terrain",
        "scrollwheel": false
    });
    
    marker = new google.maps.Marker({
        map: map,
        draggable: true,
        animation: google.maps.Animation.DROP
    });

    google.maps.event.addListener(marker, 'dragend', () => {
        var pos = marker.getPosition();
        $('input[name="location.lat"]').val(pos.lat()).change();
        $('input[name="location.long"]').val(pos.lng()).change();
        updateMap();
    });

    updateMap();
}

function init() {
    mobileDetect = new MobileDetect(window.navigator.userAgent);

    if (mobileDetect.phone())
        $('#location_mobile').show();
    else
        $('#location_desktop').show();

    configurationId = location.pathname.split('/')[2];

    loadPrefs();
    listenPrefs();
    initSensorBtns();

    $('input[name="location.lat"]').change(updateMap);
    $('input[name="location.long"]').change(updateMap);

    $('.normalize').unitnorm();
    $('.spoiler').spoiler();

    if(!Modernizr.inputtypes['datetime-local']) {
        $('input[type=datetime-local]').datetimepicker({
            "showMeridian": true,
            "format": "yyyy-mm-ddThh:ii",
            "startView": 2,
            "minView": 0,
            "todayBtn": true,
            "todayHighlight": true
        });
    }
}

$(window).ready(init);