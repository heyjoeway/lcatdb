let serverUrl = '<!--url-->';

$('document').ready(() => {
    function initMap() {
        // window.mapTime = new Map('#map-time');

        $('#map-time-picker').change(function() {
            let queryObj = urlQueryObj($('#map-time').attr('src'));
            queryObj.timeAgo = $(this).val();
            let newUrl = './embed/map.html?';
    
            Object.keys(queryObj).forEach((key) => {
                newUrl += key + '=' + queryObj[key] + '&';
            });
    
            newUrl = newUrl.substring(0, newUrl.length - 1);
    
            $('#map-time').attr('src', newUrl);
        });
    
        $('#map-user-picker').change(function() {
            let queryObj = urlQueryObj($('#map-time').attr('src'));
            let creator = $(this).val();
            if (creator == 'all') delete queryObj.creator;
            else queryObj.creator = creator;
            let newUrl = './embed/map.html?';
    
            Object.keys(queryObj).forEach((key) => {
                newUrl += key + '=' + queryObj[key] + '&';
            });
    
            newUrl = newUrl.substring(0, newUrl.length - 1);
    
            $('#map-time').attr('src', newUrl);
        });
    }

    // ------------------------------------------------------------------------
    
    function initJs() {
        $('.js').removeClass('js');
        $('.no-js').hide();
    }
    
    // ------------------------------------------------------------------------

    function initUnitSystem() {
        let unitSystem = localStorage.unitSystem;
        
        if (!unitSystem) {
            unitSystem = 'imperial';
            localStorage.unitSystem = 'imperial';
        }
    
        changeUnitSystem(unitSystem);
    
        $('#unit-system-picker').change(function() {
            let system = $(this).val();
            changeUnitSystem(system);
        });
    }

    initJs();
    initMap();
    initUnitSystem();
    initSidebar();

    handleOnline();
    setInterval(handleOnline, 1000);

    window.activeInputBlock = 0;

    if (window.parent == window)
        window.offlineInfo = new OfflineInfoManager();

    appUrls();

    document.addEventListener("deviceready", function() {
        appUrls(true);
    }, false);
});
    
// ----------------------------------------------------------------------------

class OfflineInfoManager {
    constructor() {
        this.block = false;
        this.callbacks = [];
        this.get();
    }

    /**
     * Gets info necessary for offline operation
     * 
     * @param force 
     * @param {function} callback Params: gotNewInfo {boolean}
     */
    get(force = false, callback) {
        const OFFLINE_CACHE_TIME = 5 * 60 * 1000; // milliseconds
    
        if (callback) this.callbacks.push(callback);
    
        if (this.block) return;
        this.block = true;
        
        let infoCurrent = this.info();
        if (infoCurrent && !force) {
            let timeCurrent = new Date().getTime();
            let cacheExpired = infoCurrent.time - timeCurrent >= OFFLINE_CACHE_TIME;
            if (!cacheExpired)
                return this.finish(false);
        }
    
        if (!navigator.onLine) return this.finish(false);
    
        startInputBlock();
        
        $.ajax({
            "url": `${serverUrl}/api/offlineData`,
            "dataType": "json",
            "cache": false,
            "timeout": 4500,
            "method": "POST",
            "success": (data, status) => {
                if (status != 'success')
                    return this.finish(false);

                if (data.error) {
                    if (data.error.errorName == 'noSession')
                        localStorage.offlineInfo = '';
                    return this.finish(false);
                }

                localStorage.offlineInfo = JSON.stringify(data);
                this.finish(true);
            },
            "error": () => {
                this.finish(false);
            }
        });
    }

    finish(gotNewInfo) {
        console.log("offlineInfo: gotNewInfo = " + gotNewInfo);
        this.callbacks.forEach((callback) => {
            callback(gotNewInfo);
        });
        this.callbacks = [];
    
        this.block = false;
        finishInputBlock();
    }
    
    info() {
        if (localStorage.offlineInfo)
            return JSON.parse(localStorage.offlineInfo);
    }

    expire() {
        let info = this.info();
        info.time = 0;
        localStorage.offlineInfo = JSON.stringify(info);
    }
}

// ----------------------------------------------------------------------------

function updateNavbar() {
    offlineInfo.get(false, function(gotNewInfo) {
        $.get('./templates/navUser.mustache', function(template, status) {
            if (status != 'success') return;
    
            let configurationId = $("#configuration-picker").val();

            $('#navbar').remove();
            $('#sidebar').remove();
            $('body').append(Mustache.render(template, offlineInfo.info()));
            $("#sidebar_show").click(function() {
                setTimeout(showSidebar, 1);
            });
            appUrls();
        });
    });
}

// ----------------------------------------------------------------------------

function startInputBlock() {
    $('#loading-overlay').removeClass('hide');
    setTimeout(function() {
        $('#loading-overlay').removeClass('disabled');
    }, 10);
    window.activeInputBlock++;
}

function finishInputBlock() {
    if (--window.activeInputBlock <= 0) {
        window.activeInputBlock = 0;
        
        $('#loading-overlay').addClass('disabled');
        setTimeout(function() {
            $('#loading-overlay').addClass('hide');
        }, 250);
    }
}

// ----------------------------------------------------------------------------

function handleOnline() {
    if (window.onLinePrevious == navigator.onLine) return;

    window.onLinePrevious = navigator.onLine;

    $(".online_only_hide")[navigator.onLine ? 'show' : 'hide']();
    $(".online_only_disable")
        .prop('disabled', !navigator.onLine)
        [navigator.onLine ? 'removeClass' : 'addClass']('disabled');

    $(".offline_only_hide")[navigator.onLine ? 'hide' : 'show']();
    $(".offline_only_disable")
        .prop('disabled', navigator.onLine)
        [navigator.onLine ? 'addClass' : 'removeClass']('disabled');

    if (navigator.onLine && $('#map-time')[0])
        $('#map-time')[0].contentWindow.location.reload();
}

// ----------------------------------------------------------------------------

function changeUnitSystem(system) {
    if (!system)
        system = localStorage.unitSystem;

    let $normalize = $('.normalize');
    $normalize.unitnorm('deinit');
    $normalize.each(function() {
        let $this = $(this);
        let currentSystem = $this.data('unitprefsystem');
        if (currentSystem)
            $this.attr('data-unitprefsystem', system);
    });
    $normalize.unitnorm();
    localStorage.unitSystem = system;
    $('#unit-system-picker').val(system);
}

// ----------------------------------------------------------------------------

function urlQueryObj(url) {
    let query = url.split('?')[1];
    let obj = {};
    if (query) {
        let querySplit = query.split('&');
        querySplit.forEach((item) => {
            let itemSplit = item.split('=');
            let key = itemSplit[0];
            let val = undefined; 
            
            if (itemSplit.length > 1)
                val = itemSplit.splice(1).join('=');

            obj[key] = val;
        });
    }

    return obj;
}

// ----------------------------------------------------------------------------

function modal(title, url, callback) {
    let $element = $('<div></div>');
    $element.addClass('modal fade').html(`\
<div class="modal-dialog">
    <div class="modal-content">
        <div class="modal-header">
            <button type="button" class="close" data-dismiss="modal">&times;</button>
            <h4 class="modal-title">${title}</h4>
        </div>
        <div class="modal-body">
            <iframe src="${url}" scrolling="no"></iframe>
        </div>
        <div class="modal-footer">
            <button type="button" class="btn btn-default btn-close" data-dismiss="modal">Cancel</button>
        </div>
    </div>
</div>`);

    $('body').append($element);
    $element.modal('show');

    let $iframe = $($element.find('iframe'));
    
    if (window.iFrameResize)
        $iframe.iFrameResize();

    window.addEventListener('message', (e) => {
        let msg = e.data;

        if (msg == 'modal.hide') {
            $element.modal('hide');
        } else if (msg == 'modal.lock') {
            $element.find('.close').hide();
            $element.find('.btn-close').hide();
        } else if (msg == 'modal.unlock') {
            $element.find('.close').show();
            $element.find('.btn-close').show();
        } else if (msg == 'modal.done') {
            callback($element);
        } else if (msg == 'modal.reload') {
            window.location.reload();
        }
    }, false);

    $element.on('hidden.bs.modal', function() {
        $element.remove();
    });
}

function inApp() {
    return typeof cordova != 'undefined';
}

function appUrls(force) {
    if (!force && !inApp()) return;

    $(".cordova_only_hide").show();

    $.ajax({
        url: './files.json',
        dataType: 'json',
        cache: true,
        success: function(data) {
            let filelist = data.map((obj) => { return obj.location; })
    
            $('a').each(function() {
                let href = $(this).attr('href');
    
                if (typeof href == 'undefined') return;
    
                if (href.substr(0, 1) == '.')
                    href = href.substr(1);
    
                if (href.substr(0, 1) == '/')
                    href = href.substr(1);
                else return;
                    
                let query = href.split('?')[1];
                href = href.split('?')[0];
                
                let isLocal = filelist.indexOf(href) != -1;
                
                let hrefFinal;
                if (isLocal) {
                    hrefFinal = 'file:///android_asset/www/' + href;
                    $(this).click((e) => {
                        e.preventDefault();
                        window.open($(this).attr('href'));
                    });

                } else hrefFinal = `${serverUrl}/${href}`;
    
                $(this).attr('href', hrefFinal);
            });
        }
    });
}

// ----------------------------------------------------------------------------

function testCordova(callback) {
    if (typeof cordova != 'undefined') return callback(true);

    const cordovaTimerMax = 1000;

    let cordovaTimer = 1000;
    let cordovaInterval = setInterval(() => {
        cordovaTimer += 10;
        if (typeof cordova != 'undefined') {
            callback(true);
            clearInterval(cordovaInterval);
        } else if (cordovaTimer >= cordovaTimerMax) {
            callback(false);
            clearInterval(cordovaInterval);
        }
    }, 10);
}

// ----------------------------------------------------------------------------

let sidebarOpen = false;

function initSidebar() {
    $(window).click(hideSidebar);
    $("#sidebar_show").click(function() {
        setTimeout(showSidebar, 1);
    });
}

function showSidebar() {
    $("#sidebar").show();    
    setTimeout(function() {
        $("#sidebar").addClass("sidebar_show");
        sidebarOpen = true;
    }, 10);
}

function hideSidebar() {
    if (!sidebarOpen) return;
    sidebarOpen = false;
    $("#sidebar").removeClass("sidebar_show");
    setTimeout(function() {
        $("#sidebar").hide();    
    }, 150);
}

// ----------------------------------------------------------------------------


// class Map {
//     constructor(selector, request) {
//         this.selector = selector;
//         this.request = request;
//         this.data = [];

//         this.$element = $(selector);
//         this.element = this.$element[0];

//         this.$element.data('map_obj', this);

//         this.mapReady = false;
//         this.dataReady = false;

//         // this.testCordova((isCordova) => {
//         //     this.isCordova = isCordova;
//         // });
//         this.init();
//     }

//     // testCordova(callback) {
//     //     if (typeof cordova != 'undefined') return callback(true);

//     //     const cordovaTimerMax = 1000;

//     //     let cordovaTimer = 1000;
//     //     let cordovaInterval = setInterval(() => {
//     //         cordovaTimer += 10;
//     //         if (typeof plugin.google != 'undefined') {
//     //             callback(true);
//     //             clearInterval(cordovaInterval);
//     //         } else if (cordovaTimer >= cordovaTimerMax) {
//     //             callback(false);
//     //             clearInterval(cordovaInterval);
//     //         }
//     //     }, 10);
//     // }

//     init() {
//         // if (this.isCordova) this.initCordova();
//         // else
//         this.initWeb();
//     }

//     initCordova() {
//         // this.map = plugin.google.maps.Map.getMap(this.element);
//         // this.mapReady = true;
//     }

//     initWeb() {
//         console.log("TODO");
//         if (typeof google == "undefined") {
//             $.getScript('<!--map_url-->', function() {

//             });
//         }
//     }

//     updateRequest(request) {
//         if (request) this.request = this.request;

//         let queries;
//         if (this.request.queries) {
//             queries = this.request.queries;
//         } else {
//             let query = {
//                 "fields": {
//                     "location.lat": 1,
//                     "location.long": 1
//                 },
//                 "filter": {
//                     "timeCreated": {}
//                 },
//                 "sort": [
//                     ["_id", -1]
//                 ]
//             };
    
//             let readingsMax = parseInt(this.request.readingsMax);
//             if (readingsMax) {
//                 query.filter.pageSize = readingsMax;
//                 query.filter.page = 1;
//             }
    
//             let timeMin = parseInt(this.request.timeMin);
//             let timeAgo = parseInt(this.request.timeAgo);
//             if (typeof timeAgo != 'undefined') {
//                 let date = new Date();
//                 date.setSeconds(date.getSeconds() - timeAgo);
//                 timeMin = date.getTime();
//             }
    
//             if (timeMin || timeMin == 0)
//                 query.filter.timeCreated['$gte'] = timeMin;
    
//             let timeMax = parseInt(this.request.timeMax);
//             if (timeMax) query.filter.timeCreated['$lte'] = timeMax;
    
//             let id = this.request.id;
//             if (id) query.filter['_id'] = id;
    
//             let configuration = this.request.configuration;
//             if (configuration) query.filter.configuration = configuration;
    
//             let creator = this.request.creator;
//             if (creator) query.filter.creator = creator;
    
//             queries = [query];
//         }

//         this.getQueries(queries);
//     }
    
//     getQueries(queries) {
//         this.dataReady = false;
//         this.data = [];
//         let queriesLeft = queries.length;
    
//         queries.forEach((query, arr, i) => {
//             $.post('/api/readings', query, (dataSet, textStatus) => {
//                 if (textStatus == 'success') {
//                     this.readings.push(dataSet);
//                     queriesLeft--;
//                     if (queriesLeft == 0) {
//                         this.dataReady = true;                        
//                         this.updateMap();
//                     }
//                 }
//             });
//         });
//     }
// }