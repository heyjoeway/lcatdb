$(() => {
    $('.js').removeClass('js');
    $('.no-js').hide();

    $('#map-time-picker').change(function() {
        let queryObj = urlQueryObj($('#map-time').attr('src'));
        queryObj.timeAgo = $(this).val();
        let newUrl = '/map?';

        Object.keys(queryObj).forEach((key) => {
            newUrl += key + '=' + queryObj[key] + ',';
        });

        newUrl = newUrl.substring(0, newUrl.length - 1);

        $('#map-time').attr('src', newUrl);
    });

    $('#map-user-picker').change(function() {
        let queryObj = urlQueryObj($('#map-time').attr('src'));
        let creator = $(this).val();
        if (creator == 'all') delete queryObj.creator;
        else queryObj.creator = creator;
        let newUrl = '/map?';

        Object.keys(queryObj).forEach((key) => {
            newUrl += key + '=' + queryObj[key] + ',';
        });

        newUrl = newUrl.substring(0, newUrl.length - 1);

        $('#map-time').attr('src', newUrl);
    });

    let unitSystem = localStorage.unitSystem;
    
    if (!unitSystem) {
        unitSystem = 'imperial';
        localStorage.unitSystem = 'imperial';
    }

    changeUnitSystem(unitSystem);

    $('#unit-system-picker').change(function() {
        let system = $(this).val();
        changeUnitSystem(system);
    });
});

function changeUnitSystem(system) {
    let $normalize = $('.normalize');
    $normalize.unitnorm('deinit');
    $normalize.each(function() {
        let $this = $(this);
        let currentSystem = $this.data('unitprefsystem');
        if (currentSystem)
            $this.attr('data-unitprefsystem', system);
    });
    $normalize.unitnorm();
    localStorage.unitSystem = system;
    $('#unit-system-picker').val(system);
}

function urlQueryObj(url) {
    let query = url.split('?')[1];
    let obj = {};
    if (query) {
        let querySplit = query.split(',');
        querySplit.forEach((item) => {
            let itemSplit = item.split('=');
            let key = itemSplit[0];
            let val = undefined; 
            
            if (itemSplit.length > 1)
                val = itemSplit.splice(1).join('=');

            obj[key] = val;
        });
    }

    return obj;
}

function modal(title, url, callback) {
    let $element = $('<div></div>');
    $element.addClass('modal fade').html(`\
<div class="modal-dialog">
    <div class="modal-content">
        <div class="modal-header">
            <button type="button" class="close" data-dismiss="modal">&times;</button>
            <h4 class="modal-title">${title}</h4>
        </div>
        <div class="modal-body">
            <iframe src="${url}" scrolling="no"></iframe>
        </div>
        <div class="modal-footer">
            <button type="button" class="btn btn-default btn-close" data-dismiss="modal">Cancel</button>
        </div>
    </div>
</div>`);

    $('body').append($element);
    $element.modal('show');

    let $iframe = $($element.find('iframe'));
    
    if (window.iFrameResize)
        $iframe.iFrameResize();

    window.addEventListener('message', (e) => {
        let msg = e.data;

        if (msg == 'modal.hide') {
            $element.modal('hide');
        } else if (msg == 'modal.lock') {
            $element.find('.close').hide();
            $element.find('.btn-close').hide();
        } else if (msg == 'modal.unlock') {
            $element.find('.close').show();
            $element.find('.btn-close').show();
        } else if (msg == 'modal.done') {
            callback($element);
        } else if (msg == 'modal.reload') {
            window.location.reload();
        }
    }, false);

    $element.on('hidden.bs.modal', function() {
        $element.remove();
    });
}