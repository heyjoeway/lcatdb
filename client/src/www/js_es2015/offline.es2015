class OfflineEvent {
    constructor(obj) {
        obj = obj || {};
        this.type = obj.type || "none";
        this.data = obj.data || {};
        this.id = obj.id || this.randomId();
        this.autoSubmit = obj.autoSubmit || true;
        this.status = "pending";
        this.priority = 0; // Higher priority = processes sooner
        /* 
         * Available states are:
         * - hold: Event is being modified or held in some form, do not submit
         * - pending: Waiting to be submitted
         * - success: Already succeeded (event should be deleted in this case)
         * - idConflict: Event has already been processed by server (same as success)
         * - failure: Generic failure, allow user to manually retry
         * 
         * Other states can be provided and managed by subclasses
         */
    }

    toObj() {
        return {
            "type": this.type,
            "data": this.data,
            "id": this.id,
            "autoSubmit": this.autoSubmit,
            "status": this.status,
            "priority": this.priority
        }
    }

    randomId() {
        return Math.random().toString().substr(2);
    }

    submit(callback) {
        console.log("Please override this function.");
        callback({ "result": "unimplemented" });
    }
}

// Generic post request
class OfflinePost extends OfflineEvent {
    constructor(obj) {
        obj = obj || { };
        obj.type = "post";
        obj.priority = 0;
        super(obj);
    }

    submit(callback) {
        // TODO
    }
}



class OfflineEventQueue {
    constructor() {
        this.events = [];
    }
}