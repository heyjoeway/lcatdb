let configurationId, map, marker;

function prefValue(key, val) {
    if (val) localStorage[`configurations.${configurationId}.${key}`] = val;
    return localStorage[`configurations.${configurationId}.${key}`];
}

function getLocation() {
    if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(
            (pos) => { // Success
                $('#location_lat').val(pos.coords.latitude);
                $('#location_long').val(pos.coords.longitude);
                $('#location_range').val(pos.coords.accuracy);
                $('#location_alt').val(pos.coords.altitude);
                $('#location_altRange').val(pos.coords.altitudeAccuracy);
                updateMap();
            },
            (error) => { // Failure
                $.notify({
                    "message": 'Could not retrieve location. Please allow location on your device.'
                }, {
                    "type": 'warning'
                });
            },
            { // Options
                "enableHighAccuracy": true,
                "maximumAge": 3 * 60 * 1000, // 3 minutes
                "timeout": 15 * 1000 // 15 sec (may increase)
            }
        );
    } else {
        $.notify({
            "message": 'Could not retrieve location. Geolocation is not supported by this browser.'
        }, {
            "type": 'warning'
        });
    }
}

let prefHandlers = [
    {
        "name": 'locationalways',
        "load": function() {
            let query = location.href.split('?')[1];

            let quick;
            if (query)
                quick = query.split(',').includes('quick');

            if (quick) prefValue(this.name, true)

            let isSet = prefValue(this.name) == 'true';

            $('#' + this.name).prop('checked', isSet);
            if (isSet) getLocation();
        },
        "save": function() {
            prefValue(this.name, $('#' + this.name).prop('checked').toString());
        },
        "listen": function() {
            $('#' + this.name).change(() => { this.save() });
        }
    }
];

function loadPrefs() {
    prefHandlers.forEach((handler) => {
        handler.load();
    });
}

function savePrefs() {
    prefHandlers.forEach((handler) => {
        handler.save();
    });
}

function listenPrefs() {
    prefHandlers.forEach((handler) => {
        handler.listen();
    });
}

function init() {
    configurationId = location.pathname.split('/')[2];

    loadPrefs();
    listenPrefs();
    modalSensorNew.init();
}

function updateSensors(success) {
    $.get('./reading', (data, status) => {
        // if (['success', 'notmodified'].includes(status)) {
        console.log(data);
        window.test = data;
        // } else failure('get');
        let sensorsNew = $(data).find(".sensor").toArray();
        let sensorsCurrent = $('body').find('.sensor').toArray();

        let sensorsCurrentIds = sensorsCurrent.map((x) => { return x.id; });

        sensorsNew.forEach((sensor) => {
            if (!sensorsCurrentIds.includes(sensor.id)) {
                $("#sensors").append(sensor);
                $("#sensors-none").hide();
            }
        });

        success();
    
    });

}

let modalSensorNew = {

    fail: function(error) {
        $('#modal-sensor-new .modal-step-error').show();
    },

    createSensor: function(typeKey, model) {
        $('#modal-sensor-new .modal-step').hide();
        $('#modal-sensor-new .modal-step-loading').show();

        let cid = window.location.pathname.split('/')[2];

        $.post(`/sensors/newDo`,
            {
                "type": typeKey,
                "model": model,
                "configuration": cid
            },
            (data, success) => {
                console.log(data);
                updateSensors(() => {
                    $('#modal-sensor-new').modal('hide');
                });
            }
        );
    },

    showModels: function(typeKey) {
        $('#modal-sensor-new .modal-step').hide();
        $('#modal-sensor-models').html('');

        this.types[typeKey].models.forEach((model) => {
            $("#modal-sensor-models").append(`<a href="#">
                <li class="list-group-item sensor-model">
                    ${model.name}
                </li>
            </a>`);
        });
        
        $('.sensor-model').click((e) => {
            e.preventDefault();
            this.createSensor(typeKey, e.target.innerText);
        });

        $('#modal-sensor-new .modal-step-2').show();
    },

    showTypes: function() {
        Object.keys(this.types).forEach((key) => {
            let type = this.types[key];
            $("#modal-sensor-types").append(`<a href="#">
                <li class="list-group-item sensor-type" id="sensor-type_${key}">
                    ${type.name}
                </li>
            </a>`);
        });

        $('.sensor-type').click((e) => {
            e.preventDefault();
            let id = e.target.id.split('_')[1];
            this.showModels(id);
        });
        
        $('#modal-sensor-new .modal-step').hide();
        $('#modal-sensor-new .modal-step-1').show();
    },

    init: function() {
        $('#modal-sensor-new .modal-step').hide();
        $('#modal-sensor-new .modal-step-loading').show();

        $.getJSON('/api/sensorTypes', (data, status) => {
            if (['success', 'notmodified'].includes(status)) {
                this.types = data;
                this.showTypes();

            } else this.fail('types');
        });

        $('#sensor-new').click((e) => {
            e.preventDefault();
            $('#modal-sensor-new').modal('show');
            if (this.types) {
                $('#modal-sensor-new .modal-step').hide();
                $('#modal-sensor-new .modal-step-1').show();
            }
        });
    }
}

function initMap() {
    map = new google.maps.Map(document.getElementById('map'), {
        zoom: 12
    });
    
    marker = new google.maps.Marker({
        map: map
    });
    updateMap();
}

function updateMap() {
    let pos = new google.maps.LatLng(
        $('#location_lat').val(),
        $('#location_long').val()
    );

    marker.setPosition(pos);
    map.setCenter(pos);
}

$(window).ready(init);